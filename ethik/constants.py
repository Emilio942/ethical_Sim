# Block 1: Konstanten und Hilfsfunktionen (aus se2.py extrahiert)
# Purpose: Zentralisierung von Konfigurationswerten und magischen Zahlen.

import numpy as np
import random
from typing import Set

# --- Verarbeitungstypen ---
# Die Klasse NeuralProcessingType wird nun aus ethik.neural_types importiert,
# aber die Konstanten für ALL_TYPES können hier bleiben, falls sie global gebraucht werden.
# Alternativ könnten sie auch in neural_types.py bleiben und von dort importiert werden.
# Fürs Erste lasse ich sie hier, um die Struktur von se2.py Block 1 zu erhalten.
# Überlegung: Es ist sauberer, wenn ALL_TYPES direkt in der NeuralProcessingType Klasse ist.
# Wird im nächsten Schritt der Modulbereinigung ggf. dorthin verschoben.

# Wird jetzt von ethik.neural_types importiert
# class NeuralProcessingType:
#     SYSTEMATIC = "systematic"
#     INTUITIVE = "intuitive"
#     # ... (Rest der Klasse war hier)

# --- Kognitive Architektur Parameter ---
BETA_DIST_CENTERED = (5, 5)
BETA_DIST_HIGH_SKEW = (3, 7)
BETA_DIST_LOW_SKEW = (7, 3)

SYSTEMATIC_BIAS_REDUCTION = 0.7
INTUITIVE_AVAILABILITY_EFFECT_SCALE = 0.5
ASSOCIATIVE_ACTIVATION_THRESHOLD = 0.3
ASSOCIATIVE_SPREAD_DAMPING = 0.4
ASSOCIATIVE_CONCEPT_SPREAD_DAMPING = 0.3
ANALOGICAL_STRENGTH = 0.5
ANALOGICAL_CONTEXT_WEIGHT = 0.1
EMOTIONAL_REGULATION_DAMPING = 0.5
NARRATIVE_COHERENCE_BIAS = 0.3

BAYESIAN_DEFAULT_EVIDENCE_WEIGHT = 0.5
BAYESIAN_SYSTEMATIC_EVIDENCE_WEIGHT_BOOST = 0.2
BAYESIAN_EMOTIONAL_EVIDENCE_WEIGHT_REDUCTION = 0.2
BAYESIAN_ANCHORING_EFFECT_SCALE = 0.2

# --- Belief Parameter ---
BELIEF_ACTIVATION_DECAY_RATE = 0.8
BELIEF_ACTIVATION_TIME_DECAY_RATE = 0.1

# --- Agenten Parameter ---
PERSONALITY_DEFAULT_DIST = BETA_DIST_CENTERED

COGNITIVE_ARCH_OPENNESS_THRESHOLD = 0.7
COGNITIVE_ARCH_CONSCIENTIOUSNESS_THRESHOLD = 0.6
COGNITIVE_ARCH_AGREEABLENESS_THRESHOLD = 0.7
COGNITIVE_ARCH_EXTROVERSION_THRESHOLD = 0.6
COGNITIVE_ARCH_NEUROTICISM_THRESHOLD = 0.7
COGNITIVE_ARCH_DEFAULT_BALANCE_RANGE = (0.6, 0.8)
COGNITIVE_ARCH_CONSC_BALANCE_MOD = 0.3
COGNITIVE_ARCH_NEUR_BALANCE_MOD = 0.3

MORAL_FOUNDATIONS_DEFAULT_DIST = BETA_DIST_CENTERED

WORKING_MEMORY_BASE_CAPACITY = 5
WORKING_MEMORY_CONSC_CAPACITY_MOD = 2
WORKING_MEMORY_BASE_RETENTION = 0.7
WORKING_MEMORY_CONSC_RETENTION_MOD = 0.3

DECISION_MORAL_WEIGHT = 0.3
DECISION_GROUP_NORM_WEIGHT = 0.2
DECISION_RISK_AVERSION_BASE = 0.7
DECISION_RISK_OPENNESS_MOD = 0.4
DECISION_INGROUP_BIAS_MOD = 1.0
DECISION_NOISE_STD_DEV_DEFAULT = 0.2
DECISION_NOISE_STD_DEV_SYSTEMATIC = 0.1
DECISION_NOISE_STD_DEV_INTUITIVE = 0.3
DECISION_CONSISTENCY_BOOST_FACTOR = 0.2
DECISION_RECENCY_BOOST_FACTOR = 0.15
DECISION_EMOTION_BOOST_FACTOR = 0.3
DECISION_SIGNIFICANT_DISSONANCE_THRESHOLD = 0.3
DECISION_HIGH_CONFIDENCE_THRESHOLD = 0.7
DECISION_UPDATE_DURING_DELIBERATION = False
DECISION_DELIBERATION_EVIDENCE_STRENGTH = 0.1

EXPERIENCE_LEARNING_RATE_BASE = 0.05
EXPERIENCE_LEARNING_RATE_SYS_MOD = 1.2
EXPERIENCE_LEARNING_RATE_ASSOC_MOD = 1.1
EXPERIENCE_LEARNING_OPENNESS_MOD_RANGE = (0.8, 1.2)
EXPERIENCE_CERTAINTY_CHANGE_BASE = 0.05
EXPERIENCE_CERTAINTY_CHANGE_INCONSISTENT_PENALTY = 0.1
EXPERIENCE_VALENCE_CHANGE_THRESHOLD = 0.3
EXPERIENCE_VALENCE_CHANGE_RATE = 0.1
EXPERIENCE_SIGNIFICANT_CHANGE_THRESHOLD = 0.1

PROPAGATION_STRENGTH_DEFAULT = 0.5
PROPAGATION_STRENGTH_ASSOC_MOD = 0.6
PROPAGATION_STRENGTH_SYS_MOD = 0.4
PROPAGATION_ASSOC_CONCEPT_BOOST = 0.3

SOCIAL_LEARNING_RATE_BASE = 0.02
SOCIAL_LEARNING_NARRATIVE_FACTOR = 1.3
SOCIAL_LEARNING_SYSTEMATIC_FACTOR = 0.7
SOCIAL_LEARNING_AGREEABLENESS_FACTOR_RANGE = (0.7, 1.3)
SOCIAL_LEARNING_AUTHORITY_BIAS_MOD = 1.0
SOCIAL_LEARNING_CERTAINTY_FACTOR_SELF_MOD = 0.5
SOCIAL_LEARNING_CERTAINTY_FACTOR_OTHER_MOD = 0.5
SOCIAL_LEARNING_INGROUP_BIAS_MOD = 1.0
SOCIAL_LEARNING_DOGMATISM_FACTOR = 0.7
SOCIAL_LEARNING_MIN_CHANGE_THRESHOLD = 0.01
SOCIAL_LEARNING_SIGNIFICANT_VALENCE_CHANGE_THRESHOLD = 0.05
SOCIAL_LEARNING_VALENCE_CHANGE_RATE = 0.5
SOCIAL_LEARNING_CERTAINTY_CHANGE_RATE = 0.3
SOCIAL_LEARNING_SIGNIFICANT_INFLUENCE_THRESHOLD = 0.1

# REFLECTION_ENABLED_STYLES: Diese Konstante ist abhängig von NeuralProcessingType.
# Sie sollte entweder in neural_types.py definiert werden oder NeuralProcessingType hier importieren.
# Fürs Erste importieren wir es hier, um die Abhängigkeit klar zu machen.
from .neural_types import NeuralProcessingType as REFLECTION_NPT_STYLES # Alias um Namenskonflikt zu vermeiden, falls NPT auch hier definiert wäre
REFLECTION_ENABLED_STYLES: Set[str] = {REFLECTION_NPT_STYLES.SYSTEMATIC, REFLECTION_NPT_STYLES.ANALOGICAL}

REFLECTION_STRENGTH_BASE = 0.3
REFLECTION_STRENGTH_SYS_MOD = 0.5
REFLECTION_OPENNESS_MOD_RANGE = (0.7, 1.3)
REFLECTION_MEMORY_FRACTION = 0.3
REFLECTION_MIN_MEMORY_ITEMS = 5
REFLECTION_CONSISTENCY_THRESHOLD = 0.6
REFLECTION_CONSOLIDATION_RATE = 0.3
REFLECTION_CERTAINTY_BOOST_RATE = 0.05

# --- Society Parameter ---
AGENT_GENERATION_BELIEF_DIST = "beta"
AGENT_GENERATION_MIN_BELIEFS = 5
AGENT_GENERATION_MAX_BELIEFS = 15
AGENT_GENERATION_CONN_PROB = 0.3
AGENT_GENERATION_CONN_STRENGTH_RANGE = (0.1, 0.5)
AGENT_GENERATION_SIMILARITY_VARIATION_FACTOR = 0.2
AGENT_GENERATION_BELIEF_STRENGTH_VARIATION_FACTOR = 0.3
AGENT_GENERATION_BELIEF_CERTAINTY_VARIATION_FACTOR = 0.3
AGENT_GENERATION_BELIEF_VALENCE_VARIATION_FACTOR = 0.3
AGENT_GENERATION_GROUP_ID_VARIATION_FACTOR = 0.3
AGENT_GENERATION_SIMILARITY_POLARITY_FLIP_PROB = 0.1

NETWORK_DEFAULT_DENSITY = 0.1
NETWORK_GROUP_CONN_BOOST = 0.3
NETWORK_BELIEF_SIM_FACTOR = 0.5
NETWORK_COGNITIVE_SIM_FACTOR = 0.2
NETWORK_SIMILARITY_CONN_PROB_MOD = 0.5
NETWORK_EXTROVERSION_CONN_PROB_MOD = 0.2
NETWORK_NARRATIVE_CONN_PROB_BOOST = 0.2
NETWORK_EMOTIONAL_CONN_PROB_BOOST = 0.15
NETWORK_MAX_CONN_PROB = 0.95
NETWORK_STRENGTH_FROM_SIMILARITY_RANGE = (0.3, 1.0)

SIMULATION_DEFAULT_ENSEMBLE_SIZE = 3
SIMULATION_VALIDATION_INTERVAL = 10
SIMULATION_DEFAULT_SCENARIO_PROB = 0.2
SIMULATION_DEFAULT_SOCIAL_PROB = 0.3
SIMULATION_DEFAULT_REFLECTION_PROB = 0.1

VALIDATION_LARGE_BELIEF_CHANGE_WARNING = 0.3
VALIDATION_HIGH_DISSONANCE_WARNING = 1.0
VALIDATION_EXTREME_POLARIZATION_THRESHOLD = 0.8
ANALYSIS_BELIEF_CLUSTER_THRESHOLD = 0.7
ANALYSIS_STRONG_BELIEF_THRESHOLD = 0.7
ANALYSIS_CLUSTER_MIN_SIZE = 2
ANALYSIS_DECISION_CONSENSUS_STEPS = 3
ANALYSIS_HIGH_ENSEMBLE_VARIANCE_THRESHOLD = 0.05
ANALYSIS_TOP_HIGH_VARIANCE_BELIEFS = 5

VIS_BELIEF_NETWORK_MIN_CONN_STRENGTH = 0.2
VIS_BELIEF_NODE_BASE_SIZE = 300
VIS_BELIEF_NODE_STRENGTH_SCALING = 700
VIS_BELIEF_NODE_ACTIVATION_SCALING = 700
VIS_BELIEF_NODE_CERTAINTY_ALPHA_RANGE = (0.3, 1.0)
VIS_BELIEF_EDGE_WEIGHT_SCALING = 2
VIS_SOCIAL_NODE_DEGREE_SCALING = 300
VIS_SOCIAL_EDGE_WEIGHT_SCALING = 2
VIS_STYLE_COMPARISON_NUM_BELIEFS = 5
VIS_STYLE_COMPARISON_BAR_WIDTH = 0.15

# --- Hilfsfunktionen ---
def np_random_beta(a, b):
    """Wrapper für Beta-Verteilung."""
    return np.random.beta(a, b)

def clip(value, min_val=0.0, max_val=1.0):
    """Wrapper für np.clip."""
    return np.clip(value, min_val, max_val)

def scale_value(value, old_min, old_max, new_min, new_max):
    """Skaliert einen Wert von einem Bereich in einen anderen."""
    if old_max == old_min:
        return new_min
    return (((value - old_min) * (new_max - new_min)) / (old_max - old_min)) + new_min
